{
	"id": "83be1b93db6bb0087a6c082f325f3657",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.24",
	"solcLongVersion": "0.4.24+commit.e67f0147",
	"input": {
		"language": "Solidity",
		"sources": {
			"Solidity Patterns/Guard_Check.sol": {
				"content": "//  Ensure that the behavior of a smart contract and its input parameters are as expected\n//SPDX-Licence-Identifier:MIT\npragma solidity ^0.4.20;\n\ncontract GuardCheck {\n\n    function donate(address addr) payable public {\n        require(addr != address(0));\n        require(msg.value != 0);\n        uint balanceBeforeTransfer = this.balance;\n        uint transferAmount;\n\n        if (addr.balance == 0) {\n            transferAmount = msg.value;\n        } else if (addr.balance < msg.sender.balance) {\n            transferAmount = msg.value / 2;\n        } else {\n            revert(\"No Longer Needed\");\n        }\n\n        addr.transfer(transferAmount);\n        assert(this.balance == balanceBeforeTransfer - transferAmount);\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Solidity Patterns/Guard_Check.sol": {
				"GuardCheck": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"name": "addr",
									"type": "address"
								}
							],
							"name": "donate",
							"outputs": [],
							"payable": true,
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"Solidity Patterns/Guard_Check.sol\":146:730  contract GuardCheck {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"Solidity Patterns/Guard_Check.sol\":146:730  contract GuardCheck {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"Solidity Patterns/Guard_Check.sol\":146:730  contract GuardCheck {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x362a95\n      eq\n      tag_2\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"Solidity Patterns/Guard_Check.sol\":173:728  function donate(address addr) payable public {... */\n    tag_2:\n      tag_3\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_4)\n    tag_3:\n      stop\n    tag_4:\n        /* \"Solidity Patterns/Guard_Check.sol\":298:324  uint balanceBeforeTransfer */\n      0x0\n        /* \"Solidity Patterns/Guard_Check.sol\":349:368  uint transferAmount */\n      dup1\n        /* \"Solidity Patterns/Guard_Check.sol\":252:253  0 */\n      0x0\n        /* \"Solidity Patterns/Guard_Check.sol\":236:254  addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Solidity Patterns/Guard_Check.sol\":236:240  addr */\n      dup4\n        /* \"Solidity Patterns/Guard_Check.sol\":236:254  addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"Solidity Patterns/Guard_Check.sol\":228:255  require(addr != address(0)) */\n      iszero\n      iszero\n      tag_6\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_6:\n        /* \"Solidity Patterns/Guard_Check.sol\":286:287  0 */\n      0x0\n        /* \"Solidity Patterns/Guard_Check.sol\":273:282  msg.value */\n      callvalue\n        /* \"Solidity Patterns/Guard_Check.sol\":273:287  msg.value != 0 */\n      eq\n      iszero\n        /* \"Solidity Patterns/Guard_Check.sol\":265:288  require(msg.value != 0) */\n      iszero\n      iszero\n      tag_7\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_7:\n        /* \"Solidity Patterns/Guard_Check.sol\":327:331  this */\n      address\n        /* \"Solidity Patterns/Guard_Check.sol\":327:339  this.balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"Solidity Patterns/Guard_Check.sol\":298:339  uint balanceBeforeTransfer = this.balance */\n      swap2\n      pop\n        /* \"Solidity Patterns/Guard_Check.sol\":399:400  0 */\n      0x0\n        /* \"Solidity Patterns/Guard_Check.sol\":383:387  addr */\n      dup4\n        /* \"Solidity Patterns/Guard_Check.sol\":383:395  addr.balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"Solidity Patterns/Guard_Check.sol\":383:400  addr.balance == 0 */\n      eq\n        /* \"Solidity Patterns/Guard_Check.sol\":379:610  if (addr.balance == 0) {... */\n      iszero\n      tag_8\n      jumpi\n        /* \"Solidity Patterns/Guard_Check.sol\":433:442  msg.value */\n      callvalue\n        /* \"Solidity Patterns/Guard_Check.sol\":416:442  transferAmount = msg.value */\n      swap1\n      pop\n        /* \"Solidity Patterns/Guard_Check.sol\":379:610  if (addr.balance == 0) {... */\n      jump(tag_9)\n    tag_8:\n        /* \"Solidity Patterns/Guard_Check.sol\":478:488  msg.sender */\n      caller\n        /* \"Solidity Patterns/Guard_Check.sol\":478:496  msg.sender.balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"Solidity Patterns/Guard_Check.sol\":463:467  addr */\n      dup4\n        /* \"Solidity Patterns/Guard_Check.sol\":463:475  addr.balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"Solidity Patterns/Guard_Check.sol\":463:496  addr.balance < msg.sender.balance */\n      lt\n        /* \"Solidity Patterns/Guard_Check.sol\":459:610  if (addr.balance < msg.sender.balance) {... */\n      iszero\n      tag_10\n      jumpi\n        /* \"Solidity Patterns/Guard_Check.sol\":541:542  2 */\n      0x2\n        /* \"Solidity Patterns/Guard_Check.sol\":529:538  msg.value */\n      callvalue\n        /* \"Solidity Patterns/Guard_Check.sol\":529:542  msg.value / 2 */\n      dup2\n      iszero\n      iszero\n      tag_11\n      jumpi\n      invalid\n    tag_11:\n      div\n        /* \"Solidity Patterns/Guard_Check.sol\":512:542  transferAmount = msg.value / 2 */\n      swap1\n      pop\n        /* \"Solidity Patterns/Guard_Check.sol\":459:610  if (addr.balance < msg.sender.balance) {... */\n      jump(tag_12)\n    tag_10:\n        /* \"Solidity Patterns/Guard_Check.sol\":573:599  revert(\"No Longer Needed\") */\n      mload(0x40)\n      0x8c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x4\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x10\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4e6f204c6f6e676572204e656564656400000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"Solidity Patterns/Guard_Check.sol\":459:610  if (addr.balance < msg.sender.balance) {... */\n    tag_12:\n        /* \"Solidity Patterns/Guard_Check.sol\":379:610  if (addr.balance == 0) {... */\n    tag_9:\n        /* \"Solidity Patterns/Guard_Check.sol\":620:624  addr */\n      dup3\n        /* \"Solidity Patterns/Guard_Check.sol\":620:633  addr.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Solidity Patterns/Guard_Check.sol\":620:649  addr.transfer(transferAmount) */\n      0x8fc\n        /* \"Solidity Patterns/Guard_Check.sol\":634:648  transferAmount */\n      dup3\n        /* \"Solidity Patterns/Guard_Check.sol\":620:649  addr.transfer(transferAmount) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x0\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_13\n      jumpi\n        /* \"--CODEGEN--\":45:61   */\n      returndatasize\n        /* \"--CODEGEN--\":42:43   */\n      0x0\n        /* \"--CODEGEN--\":39:40   */\n      dup1\n        /* \"--CODEGEN--\":24:62   */\n      returndatacopy\n        /* \"--CODEGEN--\":77:93   */\n      returndatasize\n        /* \"--CODEGEN--\":74:75   */\n      0x0\n        /* \"--CODEGEN--\":67:94   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_13:\n        /* \"Solidity Patterns/Guard_Check.sol\":620:649  addr.transfer(transferAmount) */\n      pop\n        /* \"Solidity Patterns/Guard_Check.sol\":706:720  transferAmount */\n      dup1\n        /* \"Solidity Patterns/Guard_Check.sol\":682:703  balanceBeforeTransfer */\n      dup3\n        /* \"Solidity Patterns/Guard_Check.sol\":682:720  balanceBeforeTransfer - transferAmount */\n      sub\n        /* \"Solidity Patterns/Guard_Check.sol\":666:670  this */\n      address\n        /* \"Solidity Patterns/Guard_Check.sol\":666:678  this.balance */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      balance\n        /* \"Solidity Patterns/Guard_Check.sol\":666:720  this.balance == balanceBeforeTransfer - transferAmount */\n      eq\n        /* \"Solidity Patterns/Guard_Check.sol\":659:721  assert(this.balance == balanceBeforeTransfer - transferAmount) */\n      iszero\n      iszero\n      tag_14\n      jumpi\n      invalid\n    tag_14:\n        /* \"Solidity Patterns/Guard_Check.sol\":173:728  function donate(address addr) payable public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820fba39bd98fa13dfc9d9825de85987dbe244bdbbb469942fc73aef852f343fc5d0029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610261806100206000396000f300608060405260043610610040576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062362a9514610045575b600080fd5b610079600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061007b565b005b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156100ba57600080fd5b600034141515156100ca57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631915060008373ffffffffffffffffffffffffffffffffffffffff1631141561010c573490506101c5565b3373ffffffffffffffffffffffffffffffffffffffff16318373ffffffffffffffffffffffffffffffffffffffff163110156101565760023481151561014e57fe5b0490506101c4565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4e6f204c6f6e676572204e65656465640000000000000000000000000000000081525060200191505060405180910390fd5b5b8273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561020b573d6000803e3d6000fd5b508082033073ffffffffffffffffffffffffffffffffffffffff163114151561023057fe5b5050505600a165627a7a72305820fba39bd98fa13dfc9d9825de85987dbe244bdbbb469942fc73aef852f343fc5d0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x261 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH3 0x362A95 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE EQ ISZERO ISZERO ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP2 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ ISZERO PUSH2 0x10C JUMPI CALLVALUE SWAP1 POP PUSH2 0x1C5 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE LT ISZERO PUSH2 0x156 JUMPI PUSH1 0x2 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x14E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F204C6F6E676572204E656564656400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x20B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP1 DUP3 SUB ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ ISZERO ISZERO PUSH2 0x230 JUMPI INVALID JUMPDEST POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 CREATE2 LOG3 SWAP12 0xd9 DUP16 LOG1 RETURNDATASIZE 0xfc SWAP14 SWAP9 0x25 0xde DUP6 SWAP9 PUSH30 0xBE244BDBBB469942FC73AEF852F343FC5D00290000000000000000000000 ",
							"sourceMap": "146:584:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;146:584:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610040576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062362a9514610045575b600080fd5b610079600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061007b565b005b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156100ba57600080fd5b600034141515156100ca57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631915060008373ffffffffffffffffffffffffffffffffffffffff1631141561010c573490506101c5565b3373ffffffffffffffffffffffffffffffffffffffff16318373ffffffffffffffffffffffffffffffffffffffff163110156101565760023481151561014e57fe5b0490506101c4565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4e6f204c6f6e676572204e65656465640000000000000000000000000000000081525060200191505060405180910390fd5b5b8273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561020b573d6000803e3d6000fd5b508082033073ffffffffffffffffffffffffffffffffffffffff163114151561023057fe5b5050505600a165627a7a72305820fba39bd98fa13dfc9d9825de85987dbe244bdbbb469942fc73aef852f343fc5d0029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH3 0x362A95 EQ PUSH2 0x45 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLVALUE EQ ISZERO ISZERO ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE SWAP2 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ ISZERO PUSH2 0x10C JUMPI CALLVALUE SWAP1 POP PUSH2 0x1C5 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE LT ISZERO PUSH2 0x156 JUMPI PUSH1 0x2 CALLVALUE DUP2 ISZERO ISZERO PUSH2 0x14E JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4E6F204C6F6E676572204E656564656400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x20B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP1 DUP3 SUB ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE EQ ISZERO ISZERO PUSH2 0x230 JUMPI INVALID JUMPDEST POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 CREATE2 LOG3 SWAP12 0xd9 DUP16 LOG1 RETURNDATASIZE 0xfc SWAP14 SWAP9 0x25 0xde DUP6 SWAP9 PUSH30 0xBE244BDBBB469942FC73AEF852F343FC5D00290000000000000000000000 ",
							"sourceMap": "146:584:0:-;;;;;;;;;;;;;;;;;;;;;;;;173:555;;;;;;;;;;;;;;;;;;;;;;;;;;;;;298:26;349:19;252:1;236:18;;:4;:18;;;;228:27;;;;;;;;286:1;273:9;:14;;265:23;;;;;;;;327:4;:12;;;298:41;;399:1;383:4;:12;;;:17;379:231;;;433:9;416:26;;379:231;;;478:10;:18;;;463:4;:12;;;:33;459:151;;;541:1;529:9;:13;;;;;;;;512:30;;459:151;;;573:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;459:151;379:231;620:4;:13;;:29;634:14;620:29;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;620:29:0;706:14;682:21;:38;666:4;:12;;;:54;659:62;;;;;;173:555;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "121800",
								"executionCost": "171",
								"totalCost": "121971"
							},
							"external": {
								"donate(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "MSTORE"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "POP"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "DUP1"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "CODECOPY"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 146,
									"end": 730,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820fba39bd98fa13dfc9d9825de85987dbe244bdbbb469942fc73aef852f343fc5d0029",
									".code": [
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "MSTORE"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "LT"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "JUMPI"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "SWAP1"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "DIV"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "AND"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "DUP1"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "362A95"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "EQ"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "JUMPI"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "JUMPDEST"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "DUP1"
										},
										{
											"begin": 146,
											"end": 730,
											"name": "REVERT"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "JUMPDEST"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "DUP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SUB"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "DUP2"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "ADD"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "DUP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "DUP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "AND"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "ADD"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP3"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP2"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "SWAP1"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "JUMP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "JUMPDEST"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "STOP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "JUMPDEST"
										},
										{
											"begin": 298,
											"end": 324,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 349,
											"end": 368,
											"name": "DUP1"
										},
										{
											"begin": 252,
											"end": 253,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "AND"
										},
										{
											"begin": 236,
											"end": 240,
											"name": "DUP4"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "AND"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "EQ"
										},
										{
											"begin": 236,
											"end": 254,
											"name": "ISZERO"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "ISZERO"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "ISZERO"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "JUMPI"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "DUP1"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "REVERT"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 228,
											"end": 255,
											"name": "JUMPDEST"
										},
										{
											"begin": 286,
											"end": 287,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 273,
											"end": 282,
											"name": "CALLVALUE"
										},
										{
											"begin": 273,
											"end": 287,
											"name": "EQ"
										},
										{
											"begin": 273,
											"end": 287,
											"name": "ISZERO"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "ISZERO"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "ISZERO"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "JUMPI"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "DUP1"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "REVERT"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 265,
											"end": 288,
											"name": "JUMPDEST"
										},
										{
											"begin": 327,
											"end": 331,
											"name": "ADDRESS"
										},
										{
											"begin": 327,
											"end": 339,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 327,
											"end": 339,
											"name": "AND"
										},
										{
											"begin": 327,
											"end": 339,
											"name": "BALANCE"
										},
										{
											"begin": 298,
											"end": 339,
											"name": "SWAP2"
										},
										{
											"begin": 298,
											"end": 339,
											"name": "POP"
										},
										{
											"begin": 399,
											"end": 400,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 383,
											"end": 387,
											"name": "DUP4"
										},
										{
											"begin": 383,
											"end": 395,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 383,
											"end": 395,
											"name": "AND"
										},
										{
											"begin": 383,
											"end": 395,
											"name": "BALANCE"
										},
										{
											"begin": 383,
											"end": 400,
											"name": "EQ"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "ISZERO"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "JUMPI"
										},
										{
											"begin": 433,
											"end": 442,
											"name": "CALLVALUE"
										},
										{
											"begin": 416,
											"end": 442,
											"name": "SWAP1"
										},
										{
											"begin": 416,
											"end": 442,
											"name": "POP"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "JUMP"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "JUMPDEST"
										},
										{
											"begin": 478,
											"end": 488,
											"name": "CALLER"
										},
										{
											"begin": 478,
											"end": 496,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 478,
											"end": 496,
											"name": "AND"
										},
										{
											"begin": 478,
											"end": 496,
											"name": "BALANCE"
										},
										{
											"begin": 463,
											"end": 467,
											"name": "DUP4"
										},
										{
											"begin": 463,
											"end": 475,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 463,
											"end": 475,
											"name": "AND"
										},
										{
											"begin": 463,
											"end": 475,
											"name": "BALANCE"
										},
										{
											"begin": 463,
											"end": 496,
											"name": "LT"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "ISZERO"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "JUMPI"
										},
										{
											"begin": 541,
											"end": 542,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 529,
											"end": 538,
											"name": "CALLVALUE"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "DUP2"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "ISZERO"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "ISZERO"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "JUMPI"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "INVALID"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "JUMPDEST"
										},
										{
											"begin": 529,
											"end": 542,
											"name": "DIV"
										},
										{
											"begin": 512,
											"end": 542,
											"name": "SWAP1"
										},
										{
											"begin": 512,
											"end": 542,
											"name": "POP"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "JUMP"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "JUMPDEST"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MLOAD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MSTORE"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "ADD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP1"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP1"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "ADD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP3"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "SUB"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP3"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MSTORE"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "10"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MSTORE"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "ADD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP1"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "4E6F204C6F6E676572204E656564656400000000000000000000000000000000"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MSTORE"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "POP"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "ADD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "SWAP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "POP"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "POP"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "MLOAD"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "DUP1"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "SWAP2"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "SUB"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "SWAP1"
										},
										{
											"begin": 573,
											"end": 599,
											"name": "REVERT"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 459,
											"end": 610,
											"name": "JUMPDEST"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 379,
											"end": 610,
											"name": "JUMPDEST"
										},
										{
											"begin": 620,
											"end": 624,
											"name": "DUP3"
										},
										{
											"begin": 620,
											"end": 633,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 620,
											"end": 633,
											"name": "AND"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "PUSH",
											"value": "8FC"
										},
										{
											"begin": 634,
											"end": 648,
											"name": "DUP3"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "SWAP1"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP2"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "ISZERO"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "MUL"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "SWAP1"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "MLOAD"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "MLOAD"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP1"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP4"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "SUB"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP2"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP6"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP9"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "DUP9"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "CALL"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "SWAP4"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "POP"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "POP"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "POP"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "POP"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 45,
											"end": 61,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 42,
											"end": 43,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 39,
											"end": 40,
											"name": "DUP1"
										},
										{
											"begin": 24,
											"end": 62,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 77,
											"end": 93,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 74,
											"end": 75,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 67,
											"end": 94,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 620,
											"end": 649,
											"name": "POP"
										},
										{
											"begin": 706,
											"end": 720,
											"name": "DUP1"
										},
										{
											"begin": 682,
											"end": 703,
											"name": "DUP3"
										},
										{
											"begin": 682,
											"end": 720,
											"name": "SUB"
										},
										{
											"begin": 666,
											"end": 670,
											"name": "ADDRESS"
										},
										{
											"begin": 666,
											"end": 678,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 666,
											"end": 678,
											"name": "AND"
										},
										{
											"begin": 666,
											"end": 678,
											"name": "BALANCE"
										},
										{
											"begin": 666,
											"end": 720,
											"name": "EQ"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "ISZERO"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "ISZERO"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "JUMPI"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "INVALID"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 659,
											"end": 721,
											"name": "JUMPDEST"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "POP"
										},
										{
											"begin": 173,
											"end": 728,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"donate(address)": "00362a95"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"Solidity Patterns/Guard_Check.sol\":\"GuardCheck\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Solidity Patterns/Guard_Check.sol\":{\"keccak256\":\"0x14116d884525b4c8de1f4dc664b66c00338275cad52e0de62cf171fef045f7d5\",\"urls\":[\"bzzr://b558a36fafea89066660828ba4533f42f020a3219031f0bf33459bfbecc9e11a\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Guard_Check.sol:10:38: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        uint balanceBeforeTransfer = this.balance;\n                                     ^----------^\n",
				"message": "Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.",
				"severity": "warning",
				"sourceLocation": {
					"end": 339,
					"file": "Solidity Patterns/Guard_Check.sol",
					"start": 327
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Guard_Check.sol:22:16: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        assert(this.balance == balanceBeforeTransfer - transferAmount);\n               ^----------^\n",
				"message": "Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.",
				"severity": "warning",
				"sourceLocation": {
					"end": 678,
					"file": "Solidity Patterns/Guard_Check.sol",
					"start": 666
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Solidity Patterns/Guard_Check.sol": {
				"ast": {
					"absolutePath": "Solidity Patterns/Guard_Check.sol",
					"exportedSymbols": {
						"GuardCheck": [
							77
						]
					},
					"id": 78,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "120:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "GuardCheck",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "218:510:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 11,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 7,
																"name": "addr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "236:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 9,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "252:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 8,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "244:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 10,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "244:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "236:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 6,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															95,
															96
														],
														"referencedDeclaration": 95,
														"src": "228:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "228:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 13,
												"nodeType": "ExpressionStatement",
												"src": "228:27:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 15,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 92,
																	"src": "273:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 16,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "273:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "286:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "273:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 14,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															95,
															96
														],
														"referencedDeclaration": 95,
														"src": "265:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "265:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 20,
												"nodeType": "ExpressionStatement",
												"src": "265:23:0"
											},
											{
												"assignments": [
													22
												],
												"declarations": [
													{
														"constant": false,
														"id": 22,
														"name": "balanceBeforeTransfer",
														"nodeType": "VariableDeclaration",
														"scope": 76,
														"src": "298:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 21,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "298:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 25,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 23,
														"name": "this",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 105,
														"src": "327:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_GuardCheck_$77",
															"typeString": "contract GuardCheck"
														}
													},
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "327:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "298:41:0"
											},
											{
												"assignments": [],
												"declarations": [
													{
														"constant": false,
														"id": 27,
														"name": "transferAmount",
														"nodeType": "VariableDeclaration",
														"scope": 76,
														"src": "349:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 26,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "349:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 28,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "349:19:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 29,
															"name": "addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3,
															"src": "383:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 30,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "383:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 31,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "399:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "383:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 39,
																"name": "addr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "463:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "463:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 41,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 92,
																	"src": "478:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 42,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "478:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 43,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "478:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "463:33:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 57,
														"nodeType": "Block",
														"src": "559:51:0",
														"statements": [
															{
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"hexValue": "4e6f204c6f6e676572204e6565646564",
																			"id": 54,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "580:18:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_0a28af821bd55c4422f19a45a0faa7ed10238e876e1edddbdb872743fcfcdf65",
																				"typeString": "literal_string \"No Longer Needed\""
																			},
																			"value": "No Longer Needed"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_0a28af821bd55c4422f19a45a0faa7ed10238e876e1edddbdb872743fcfcdf65",
																				"typeString": "literal_string \"No Longer Needed\""
																			}
																		],
																		"id": 53,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			97,
																			98
																		],
																		"referencedDeclaration": 98,
																		"src": "573:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "573:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 56,
																"nodeType": "ExpressionStatement",
																"src": "573:26:0"
															}
														]
													},
													"id": 58,
													"nodeType": "IfStatement",
													"src": "459:151:0",
													"trueBody": {
														"id": 52,
														"nodeType": "Block",
														"src": "498:55:0",
														"statements": [
															{
																"expression": {
																	"argumentTypes": null,
																	"id": 50,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"argumentTypes": null,
																		"id": 45,
																		"name": "transferAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 27,
																		"src": "512:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 46,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 92,
																				"src": "529:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 47,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "value",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "529:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "32",
																			"id": 48,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "541:1:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "529:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "512:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 51,
																"nodeType": "ExpressionStatement",
																"src": "512:30:0"
															}
														]
													}
												},
												"id": 59,
												"nodeType": "IfStatement",
												"src": "379:231:0",
												"trueBody": {
													"id": 38,
													"nodeType": "Block",
													"src": "402:51:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 36,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 33,
																	"name": "transferAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 27,
																	"src": "416:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 34,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 92,
																		"src": "433:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 35,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "433:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "416:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 37,
															"nodeType": "ExpressionStatement",
															"src": "416:26:0"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 63,
															"name": "transferAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "634:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 60,
															"name": "addr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3,
															"src": "620:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 62,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "620:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "620:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 65,
												"nodeType": "ExpressionStatement",
												"src": "620:29:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 72,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 67,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 105,
																	"src": "666:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_GuardCheck_$77",
																		"typeString": "contract GuardCheck"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "666:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 69,
																	"name": "balanceBeforeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 22,
																	"src": "682:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 70,
																	"name": "transferAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 27,
																	"src": "706:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "682:38:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "666:54:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 66,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "659:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "659:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 74,
												"nodeType": "ExpressionStatement",
												"src": "659:62:0"
											}
										]
									},
									"documentation": null,
									"id": 76,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "donate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "addr",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "189:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "189:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "188:14:0"
									},
									"payable": true,
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "218:0:0"
									},
									"scope": 77,
									"src": "173:555:0",
									"stateMutability": "payable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 78,
							"src": "146:584:0"
						}
					],
					"src": "120:610:0"
				},
				"id": 0
			}
		}
	}
}