{
	"id": "9b0a8ccf3262305ee4bd5c9e41bc809e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.24",
	"solcLongVersion": "0.4.24+commit.e67f0147",
	"input": {
		"language": "Solidity",
		"sources": {
			"Solidity Patterns/Randomness.sol": {
				"content": "//  Generate a random number of a predefined interval in the deterministic environment of a blockchain.\n\n\npragma solidity ^0.4.22;\n\ncontract Randomness {\n\n    bytes32 sealedSeed;\n    bool seedSet = false;\n    bool betsClosed = false;\n    uint storedBlockNumber;\n    address trustedParty = 0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF;\n\n    function setSealedSeed(bytes32 _sealedSeed) public {\n        require(!seedSet);\n        require (msg.sender == trustedParty);\n        betsClosed = true;\n        sealedSeed = _sealedSeed;\n        storedBlockNumber = block.number + 1;\n        seedSet = true;\n    }\n\n    function bet() public {\n        require(!betsClosed);\n        // Make bets here\n    }\n\n    function reveal(bytes32 _seed) public {\n        require(seedSet);\n        require(betsClosed);\n        require(storedBlockNumber < block.number);\n        require(keccak256(msg.sender, _seed) == sealedSeed);\n        uint random = uint(keccak256(_seed, blockhash(storedBlockNumber)));\n        // Insert logic for usage of random number here;\n        seedSet = false;\n        betsClosed = false;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Solidity Patterns/Randomness.sol": {
				"Randomness": {
					"abi": [
						{
							"constant": false,
							"inputs": [],
							"name": "bet",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_sealedSeed",
									"type": "bytes32"
								}
							],
							"name": "setSealedSeed",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_seed",
									"type": "bytes32"
								}
							],
							"name": "reveal",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"Solidity Patterns/Randomness.sol\":132:1097  contract Randomness {... */\n  mstore(0x40, 0x80)\n    /* \"Solidity Patterns/Randomness.sol\":198:203  false */\n  0x0\n    /* \"Solidity Patterns/Randomness.sol\":183:203  bool seedSet = false */\n  0x1\n  exp(0x100, 0x0)\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Solidity Patterns/Randomness.sol\":227:232  false */\n  0x0\n    /* \"Solidity Patterns/Randomness.sol\":209:232  bool betsClosed = false */\n  0x1\n  dup1\n  0x100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Solidity Patterns/Randomness.sol\":289:331  0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF */\n  0xdcad3a6d3569df655070ded06cb7a1b2ccd1d3af\n    /* \"Solidity Patterns/Randomness.sol\":266:331  address trustedParty = 0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF */\n  0x3\n  exp(0x100, 0x0)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Solidity Patterns/Randomness.sol\":132:1097  contract Randomness {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"Solidity Patterns/Randomness.sol\":132:1097  contract Randomness {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"Solidity Patterns/Randomness.sol\":132:1097  contract Randomness {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x11610c25\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x41114538\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x701fd0f1\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"Solidity Patterns/Randomness.sol\":606:691  function bet() public {... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_5:\n        /* \"Solidity Patterns/Randomness.sol\":606:691  function bet() public {... */\n      pop\n      tag_6\n      jump(tag_7)\n    tag_6:\n      stop\n        /* \"Solidity Patterns/Randomness.sol\":338:600  function setSealedSeed(bytes32 _sealedSeed) public {... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"Solidity Patterns/Randomness.sol\":338:600  function setSealedSeed(bytes32 _sealedSeed) public {... */\n      pop\n      tag_9\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_10)\n    tag_9:\n      stop\n        /* \"Solidity Patterns/Randomness.sol\":697:1095  function reveal(bytes32 _seed) public {... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"Solidity Patterns/Randomness.sol\":697:1095  function reveal(bytes32 _seed) public {... */\n      pop\n      tag_12\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      not(0x0)\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_13)\n    tag_12:\n      stop\n        /* \"Solidity Patterns/Randomness.sol\":606:691  function bet() public {... */\n    tag_7:\n        /* \"Solidity Patterns/Randomness.sol\":647:657  betsClosed */\n      0x1\n      dup1\n      swap1\n      sload\n      swap1\n      0x100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":646:657  !betsClosed */\n      iszero\n        /* \"Solidity Patterns/Randomness.sol\":638:658  require(!betsClosed) */\n      iszero\n      iszero\n      tag_15\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_15:\n        /* \"Solidity Patterns/Randomness.sol\":606:691  function bet() public {... */\n      jump\t// out\n        /* \"Solidity Patterns/Randomness.sol\":338:600  function setSealedSeed(bytes32 _sealedSeed) public {... */\n    tag_10:\n        /* \"Solidity Patterns/Randomness.sol\":408:415  seedSet */\n      0x1\n      0x0\n      swap1\n      sload\n      swap1\n      0x100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":407:415  !seedSet */\n      iszero\n        /* \"Solidity Patterns/Randomness.sol\":399:416  require(!seedSet) */\n      iszero\n      iszero\n      tag_17\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_17:\n        /* \"Solidity Patterns/Randomness.sol\":449:461  trustedParty */\n      0x3\n      0x0\n      swap1\n      sload\n      swap1\n      0x100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":435:461  msg.sender == trustedParty */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":435:445  msg.sender */\n      caller\n        /* \"Solidity Patterns/Randomness.sol\":435:461  msg.sender == trustedParty */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Solidity Patterns/Randomness.sol\":426:462  require (msg.sender == trustedParty) */\n      iszero\n      iszero\n      tag_18\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_18:\n        /* \"Solidity Patterns/Randomness.sol\":485:489  true */\n      0x1\n        /* \"Solidity Patterns/Randomness.sol\":472:482  betsClosed */\n      dup1\n      0x1\n        /* \"Solidity Patterns/Randomness.sol\":472:489  betsClosed = true */\n      0x100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":512:523  _sealedSeed */\n      dup1\n        /* \"Solidity Patterns/Randomness.sol\":499:509  sealedSeed */\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":499:523  sealedSeed = _sealedSeed */\n      dup2\n      not(0x0)\n      and\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":568:569  1 */\n      0x1\n        /* \"Solidity Patterns/Randomness.sol\":553:565  block.number */\n      number\n        /* \"Solidity Patterns/Randomness.sol\":553:569  block.number + 1 */\n      add\n        /* \"Solidity Patterns/Randomness.sol\":533:550  storedBlockNumber */\n      0x2\n        /* \"Solidity Patterns/Randomness.sol\":533:569  storedBlockNumber = block.number + 1 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":589:593  true */\n      0x1\n        /* \"Solidity Patterns/Randomness.sol\":579:586  seedSet */\n      dup1\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":579:593  seedSet = true */\n      0x100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":338:600  function setSealedSeed(bytes32 _sealedSeed) public {... */\n      pop\n      jump\t// out\n        /* \"Solidity Patterns/Randomness.sol\":697:1095  function reveal(bytes32 _seed) public {... */\n    tag_13:\n        /* \"Solidity Patterns/Randomness.sol\":912:923  uint random */\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":753:760  seedSet */\n      0x1\n      0x0\n      swap1\n      sload\n      swap1\n      0x100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":745:761  require(seedSet) */\n      iszero\n      iszero\n      tag_20\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_20:\n        /* \"Solidity Patterns/Randomness.sol\":779:789  betsClosed */\n      0x1\n      dup1\n      swap1\n      sload\n      swap1\n      0x100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"Solidity Patterns/Randomness.sol\":771:790  require(betsClosed) */\n      iszero\n      iszero\n      tag_21\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_21:\n        /* \"Solidity Patterns/Randomness.sol\":828:840  block.number */\n      number\n        /* \"Solidity Patterns/Randomness.sol\":808:825  storedBlockNumber */\n      sload(0x2)\n        /* \"Solidity Patterns/Randomness.sol\":808:840  storedBlockNumber < block.number */\n      lt\n        /* \"Solidity Patterns/Randomness.sol\":800:841  require(storedBlockNumber < block.number) */\n      iszero\n      iszero\n      tag_22\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_22:\n        /* \"Solidity Patterns/Randomness.sol\":891:901  sealedSeed */\n      sload(0x0)\n        /* \"Solidity Patterns/Randomness.sol\":859:901  keccak256(msg.sender, _seed) == sealedSeed */\n      not(0x0)\n      and\n        /* \"Solidity Patterns/Randomness.sol\":869:879  msg.sender */\n      caller\n        /* \"Solidity Patterns/Randomness.sol\":881:886  _seed */\n      dup4\n        /* \"Solidity Patterns/Randomness.sol\":859:887  keccak256(msg.sender, _seed) */\n      mload(0x40)\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x1000000000000000000000000\n      mul\n      dup2\n      mstore\n      0x14\n      add\n      dup3\n      not(0x0)\n      and\n      not(0x0)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      keccak256\n        /* \"Solidity Patterns/Randomness.sol\":859:901  keccak256(msg.sender, _seed) == sealedSeed */\n      not(0x0)\n      and\n      eq\n        /* \"Solidity Patterns/Randomness.sol\":851:902  require(keccak256(msg.sender, _seed) == sealedSeed) */\n      iszero\n      iszero\n      tag_23\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_23:\n        /* \"Solidity Patterns/Randomness.sol\":941:946  _seed */\n      dup2\n        /* \"Solidity Patterns/Randomness.sol\":958:975  storedBlockNumber */\n      sload(0x2)\n        /* \"Solidity Patterns/Randomness.sol\":948:976  blockhash(storedBlockNumber) */\n      blockhash\n        /* \"Solidity Patterns/Randomness.sol\":931:977  keccak256(_seed, blockhash(storedBlockNumber)) */\n      mload(0x40)\n      dup1\n      dup4\n      not(0x0)\n      and\n      not(0x0)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      not(0x0)\n      and\n      not(0x0)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      keccak256\n        /* \"Solidity Patterns/Randomness.sol\":926:978  uint(keccak256(_seed, blockhash(storedBlockNumber))) */\n      0x1\n      swap1\n      div\n        /* \"Solidity Patterns/Randomness.sol\":912:978  uint random = uint(keccak256(_seed, blockhash(storedBlockNumber))) */\n      swap1\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":1055:1060  false */\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":1045:1052  seedSet */\n      0x1\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":1045:1060  seedSet = false */\n      0x100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":1083:1088  false */\n      0x0\n        /* \"Solidity Patterns/Randomness.sol\":1070:1080  betsClosed */\n      0x1\n      dup1\n        /* \"Solidity Patterns/Randomness.sol\":1070:1088  betsClosed = false */\n      0x100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Solidity Patterns/Randomness.sol\":697:1095  function reveal(bytes32 _seed) public {... */\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a723058200069d8ea614ef775fb5af5ea94ca9e36b3b65cb2797667fdd8e596845641ac510029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60806040526000600160006101000a81548160ff02191690831515021790555060006001806101000a81548160ff02191690831515021790555073dcad3a6d3569df655070ded06cb7a1b2ccd1d3af600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561009a57600080fd5b50610311806100aa6000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311610c251461005c5780634111453814610073578063701fd0f1146100a4575b600080fd5b34801561006857600080fd5b506100716100d5565b005b34801561007f57600080fd5b506100a260048036038101908080356000191690602001909291905050506100f2565b005b3480156100b057600080fd5b506100d360048036038101908080356000191690602001909291905050506101b6565b005b6001809054906101000a900460ff161515156100f057600080fd5b565b600160009054906101000a900460ff1615151561010e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016a57600080fd5b60018060016101000a81548160ff02191690831515021790555080600081600019169055506001430160028190555060018060006101000a81548160ff02191690831515021790555050565b6000600160009054906101000a900460ff1615156101d357600080fd5b6001809054906101000a900460ff1615156101ed57600080fd5b436002541015156101fd57600080fd5b600054600019163383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182600019166000191681526020019250505060405180910390206000191614151561027557600080fd5b816002544060405180836000191660001916815260200182600019166000191681526020019250505060405180910390206001900490506000600160006101000a81548160ff02191690831515021790555060006001806101000a81548160ff02191690831515021790555050505600a165627a7a723058200069d8ea614ef775fb5af5ea94ca9e36b3b65cb2797667fdd8e596845641ac510029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH20 0xDCAD3A6D3569DF655070DED06CB7A1B2CCD1D3AF PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x311 DUP1 PUSH2 0xAA PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x11610C25 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x41114538 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0x701FD0F1 EQ PUSH2 0xA4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0xD5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B6 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP2 PUSH1 0x0 NOT AND SWAP1 SSTORE POP PUSH1 0x1 NUMBER ADD PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH1 0x2 SLOAD LT ISZERO ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 NOT AND CALLER DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 NOT AND EQ ISZERO ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x2 SLOAD BLOCKHASH PUSH1 0x40 MLOAD DUP1 DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 STOP PUSH10 0xD8EA614EF775FB5AF5EA SWAP5 0xca SWAP15 CALLDATASIZE 0xb3 0xb6 0x5c 0xb2 PUSH26 0x7667FDD8E596845641AC51002900000000000000000000000000 ",
							"sourceMap": "132:965:0:-;;;198:5;183:20;;;;;;;;;;;;;;;;;;;;227:5;209:23;;;;;;;;;;;;;;;;;;;;289:42;266:65;;;;;;;;;;;;;;;;;;;;132:965;8:9:-1;5:2;;;30:1;27;20:12;5:2;132:965:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806311610c251461005c5780634111453814610073578063701fd0f1146100a4575b600080fd5b34801561006857600080fd5b506100716100d5565b005b34801561007f57600080fd5b506100a260048036038101908080356000191690602001909291905050506100f2565b005b3480156100b057600080fd5b506100d360048036038101908080356000191690602001909291905050506101b6565b005b6001809054906101000a900460ff161515156100f057600080fd5b565b600160009054906101000a900460ff1615151561010e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016a57600080fd5b60018060016101000a81548160ff02191690831515021790555080600081600019169055506001430160028190555060018060006101000a81548160ff02191690831515021790555050565b6000600160009054906101000a900460ff1615156101d357600080fd5b6001809054906101000a900460ff1615156101ed57600080fd5b436002541015156101fd57600080fd5b600054600019163383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182600019166000191681526020019250505060405180910390206000191614151561027557600080fd5b816002544060405180836000191660001916815260200182600019166000191681526020019250505060405180910390206001900490506000600160006101000a81548160ff02191690831515021790555060006001806101000a81548160ff02191690831515021790555050505600a165627a7a723058200069d8ea614ef775fb5af5ea94ca9e36b3b65cb2797667fdd8e596845641ac510029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x11610C25 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x41114538 EQ PUSH2 0x73 JUMPI DUP1 PUSH4 0x701FD0F1 EQ PUSH2 0xA4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0xD5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 0x0 NOT AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B6 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP2 PUSH1 0x0 NOT AND SWAP1 SSTORE POP PUSH1 0x1 NUMBER ADD PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH1 0x2 SLOAD LT ISZERO ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x0 NOT AND CALLER DUP4 PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 NOT AND EQ ISZERO ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x2 SLOAD BLOCKHASH PUSH1 0x40 MLOAD DUP1 DUP4 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 NOT AND PUSH1 0x0 NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DIV SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 STOP PUSH10 0xD8EA614EF775FB5AF5EA SWAP5 0xca SWAP15 CALLDATASIZE 0xb3 0xb6 0x5c 0xb2 PUSH26 0x7667FDD8E596845641AC51002900000000000000000000000000 ",
							"sourceMap": "132:965:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;606:85;;8:9:-1;5:2;;;30:1;27;20:12;5:2;606:85:0;;;;;;338:262;;8:9:-1;5:2;;;30:1;27;20:12;5:2;338:262:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;697:398;;8:9:-1;5:2;;;30:1;27;20:12;5:2;697:398:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;606:85;647:10;;;;;;;;;;;646:11;638:20;;;;;;;;606:85::o;338:262::-;408:7;;;;;;;;;;;407:8;399:17;;;;;;;;449:12;;;;;;;;;;;435:26;;:10;:26;;;426:36;;;;;;;;485:4;472:10;;:17;;;;;;;;;;;;;;;;;;512:11;499:10;:24;;;;;;;568:1;553:12;:16;533:17;:36;;;;589:4;579:7;;:14;;;;;;;;;;;;;;;;;;338:262;:::o;697:398::-;912:11;753:7;;;;;;;;;;;745:16;;;;;;;;779:10;;;;;;;;;;;771:19;;;;;;;;828:12;808:17;;:32;800:41;;;;;;;;891:10;;859:42;;;869:10;881:5;859:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:42;;;;851:51;;;;;;;;941:5;958:17;;948:28;931:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;926:52;;;912:66;;1055:5;1045:7;;:15;;;;;;;;;;;;;;;;;;1083:5;1070:10;;:18;;;;;;;;;;;;;;;;;;697:398;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "157000",
								"executionCost": "61053",
								"totalCost": "218053"
							},
							"external": {
								"bet()": "445",
								"reveal(bytes32)": "42419",
								"setSealedSeed(bytes32)": "81386"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "MSTORE"
								},
								{
									"begin": 198,
									"end": 203,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "EXP"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "DUP2"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "SLOAD"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "DUP2"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "MUL"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "NOT"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "AND"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "SWAP1"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "DUP4"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "ISZERO"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "ISZERO"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "MUL"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "OR"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "SWAP1"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "SSTORE"
								},
								{
									"begin": 183,
									"end": 203,
									"name": "POP"
								},
								{
									"begin": 227,
									"end": 232,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "DUP1"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "EXP"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "DUP2"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "SLOAD"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "DUP2"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "MUL"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "NOT"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "AND"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "SWAP1"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "DUP4"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "ISZERO"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "ISZERO"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "MUL"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "OR"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "SWAP1"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "SSTORE"
								},
								{
									"begin": 209,
									"end": 232,
									"name": "POP"
								},
								{
									"begin": 289,
									"end": 331,
									"name": "PUSH",
									"value": "DCAD3A6D3569DF655070DED06CB7A1B2CCD1D3AF"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "PUSH",
									"value": "3"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "PUSH",
									"value": "100"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "EXP"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "DUP2"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "SLOAD"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "DUP2"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "MUL"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "NOT"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "AND"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "SWAP1"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "DUP4"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "PUSH",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "AND"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "MUL"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "OR"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "SWAP1"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "SSTORE"
								},
								{
									"begin": 266,
									"end": 331,
									"name": "POP"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "POP"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "DUP1"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "CODECOPY"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 132,
									"end": 1097,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a723058200069d8ea614ef775fb5af5ea94ca9e36b3b65cb2797667fdd8e596845641ac510029",
									".code": [
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "MSTORE"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "LT"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "SWAP1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "DIV"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "AND"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "DUP1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "11610C25"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "EQ"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "DUP1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "41114538"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "EQ"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "DUP1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "701FD0F1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "EQ"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "JUMPDEST"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "DUP1"
										},
										{
											"begin": 132,
											"end": 1097,
											"name": "REVERT"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "JUMPDEST"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "POP"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "JUMP"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "JUMPDEST"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "STOP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "JUMPDEST"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "DUP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SUB"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "DUP2"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "ADD"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "DUP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "DUP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "NOT"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "AND"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "ADD"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP3"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP2"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "SWAP1"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "JUMP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "JUMPDEST"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "STOP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "JUMPDEST"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "DUP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SUB"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "DUP2"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "ADD"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "DUP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "DUP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "NOT"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "AND"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "ADD"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP3"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP2"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "SWAP1"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "JUMP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "JUMPDEST"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "STOP"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "JUMPDEST"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "DUP1"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "SWAP1"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "SLOAD"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "SWAP1"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "EXP"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "SWAP1"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "DIV"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 647,
											"end": 657,
											"name": "AND"
										},
										{
											"begin": 646,
											"end": 657,
											"name": "ISZERO"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "ISZERO"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "ISZERO"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "JUMPI"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "DUP1"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "REVERT"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 638,
											"end": 658,
											"name": "JUMPDEST"
										},
										{
											"begin": 606,
											"end": 691,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "JUMPDEST"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "SWAP1"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "SLOAD"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "SWAP1"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "EXP"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "SWAP1"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "DIV"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 408,
											"end": 415,
											"name": "AND"
										},
										{
											"begin": 407,
											"end": 415,
											"name": "ISZERO"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "ISZERO"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "ISZERO"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "JUMPI"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "DUP1"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "REVERT"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 399,
											"end": 416,
											"name": "JUMPDEST"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "SWAP1"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "SLOAD"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "SWAP1"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "EXP"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "SWAP1"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "DIV"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 449,
											"end": 461,
											"name": "AND"
										},
										{
											"begin": 435,
											"end": 461,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 435,
											"end": 461,
											"name": "AND"
										},
										{
											"begin": 435,
											"end": 445,
											"name": "CALLER"
										},
										{
											"begin": 435,
											"end": 461,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 435,
											"end": 461,
											"name": "AND"
										},
										{
											"begin": 435,
											"end": 461,
											"name": "EQ"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "ISZERO"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "ISZERO"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "JUMPI"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "DUP1"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "REVERT"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 426,
											"end": 462,
											"name": "JUMPDEST"
										},
										{
											"begin": 485,
											"end": 489,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 472,
											"end": 482,
											"name": "DUP1"
										},
										{
											"begin": 472,
											"end": 482,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "EXP"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "DUP2"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "SLOAD"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "DUP2"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "MUL"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "NOT"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "AND"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "SWAP1"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "DUP4"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "ISZERO"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "ISZERO"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "MUL"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "OR"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "SWAP1"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "SSTORE"
										},
										{
											"begin": 472,
											"end": 489,
											"name": "POP"
										},
										{
											"begin": 512,
											"end": 523,
											"name": "DUP1"
										},
										{
											"begin": 499,
											"end": 509,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "DUP2"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "NOT"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "AND"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "SWAP1"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "SSTORE"
										},
										{
											"begin": 499,
											"end": 523,
											"name": "POP"
										},
										{
											"begin": 568,
											"end": 569,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 553,
											"end": 565,
											"name": "NUMBER"
										},
										{
											"begin": 553,
											"end": 569,
											"name": "ADD"
										},
										{
											"begin": 533,
											"end": 550,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 533,
											"end": 569,
											"name": "DUP2"
										},
										{
											"begin": 533,
											"end": 569,
											"name": "SWAP1"
										},
										{
											"begin": 533,
											"end": 569,
											"name": "SSTORE"
										},
										{
											"begin": 533,
											"end": 569,
											"name": "POP"
										},
										{
											"begin": 589,
											"end": 593,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 579,
											"end": 586,
											"name": "DUP1"
										},
										{
											"begin": 579,
											"end": 586,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "EXP"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "DUP2"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "SLOAD"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "DUP2"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "MUL"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "NOT"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "AND"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "SWAP1"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "DUP4"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "ISZERO"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "ISZERO"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "MUL"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "OR"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "SWAP1"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "SSTORE"
										},
										{
											"begin": 579,
											"end": 593,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "POP"
										},
										{
											"begin": 338,
											"end": 600,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "JUMPDEST"
										},
										{
											"begin": 912,
											"end": 923,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "SWAP1"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "SLOAD"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "SWAP1"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "EXP"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "SWAP1"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "DIV"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 753,
											"end": 760,
											"name": "AND"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "ISZERO"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "ISZERO"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "JUMPI"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "DUP1"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "REVERT"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 745,
											"end": 761,
											"name": "JUMPDEST"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "DUP1"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "SWAP1"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "SLOAD"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "SWAP1"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "EXP"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "SWAP1"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "DIV"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 779,
											"end": 789,
											"name": "AND"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "ISZERO"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "ISZERO"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "JUMPI"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "DUP1"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "REVERT"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 771,
											"end": 790,
											"name": "JUMPDEST"
										},
										{
											"begin": 828,
											"end": 840,
											"name": "NUMBER"
										},
										{
											"begin": 808,
											"end": 825,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 808,
											"end": 825,
											"name": "SLOAD"
										},
										{
											"begin": 808,
											"end": 840,
											"name": "LT"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "ISZERO"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "ISZERO"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "JUMPI"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "DUP1"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "REVERT"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 800,
											"end": 841,
											"name": "JUMPDEST"
										},
										{
											"begin": 891,
											"end": 901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 891,
											"end": 901,
											"name": "SLOAD"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "NOT"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "AND"
										},
										{
											"begin": 869,
											"end": 879,
											"name": "CALLER"
										},
										{
											"begin": 881,
											"end": 886,
											"name": "DUP4"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP1"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP4"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "AND"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "AND"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "1000000000000000000000000"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "MUL"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "MSTORE"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "14"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "ADD"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP3"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "NOT"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "AND"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "NOT"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "AND"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP2"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "MSTORE"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "ADD"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "SWAP3"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "POP"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "MLOAD"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "DUP1"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "SWAP2"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "SUB"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "SWAP1"
										},
										{
											"begin": 859,
											"end": 887,
											"name": "KECCAK256"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "NOT"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "AND"
										},
										{
											"begin": 859,
											"end": 901,
											"name": "EQ"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "ISZERO"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "ISZERO"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "JUMPI"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "DUP1"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "REVERT"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 851,
											"end": 902,
											"name": "JUMPDEST"
										},
										{
											"begin": 941,
											"end": 946,
											"name": "DUP2"
										},
										{
											"begin": 958,
											"end": 975,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 958,
											"end": 975,
											"name": "SLOAD"
										},
										{
											"begin": 948,
											"end": 976,
											"name": "BLOCKHASH"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "MLOAD"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP1"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP4"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "NOT"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "AND"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "NOT"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "AND"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP2"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "MSTORE"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "ADD"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP3"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "NOT"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "AND"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "NOT"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "AND"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP2"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "MSTORE"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "ADD"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "SWAP3"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "POP"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "POP"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "POP"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "MLOAD"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "DUP1"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "SWAP2"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "SUB"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "SWAP1"
										},
										{
											"begin": 931,
											"end": 977,
											"name": "KECCAK256"
										},
										{
											"begin": 926,
											"end": 978,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 926,
											"end": 978,
											"name": "SWAP1"
										},
										{
											"begin": 926,
											"end": 978,
											"name": "DIV"
										},
										{
											"begin": 912,
											"end": 978,
											"name": "SWAP1"
										},
										{
											"begin": 912,
											"end": 978,
											"name": "POP"
										},
										{
											"begin": 1055,
											"end": 1060,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1045,
											"end": 1052,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1045,
											"end": 1052,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "EXP"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "DUP2"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "SLOAD"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "DUP2"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "MUL"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "NOT"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "AND"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "SWAP1"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "DUP4"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "ISZERO"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "ISZERO"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "MUL"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "OR"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "SWAP1"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "SSTORE"
										},
										{
											"begin": 1045,
											"end": 1060,
											"name": "POP"
										},
										{
											"begin": 1083,
											"end": 1088,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1070,
											"end": 1080,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1070,
											"end": 1080,
											"name": "DUP1"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "EXP"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "DUP2"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "SLOAD"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "DUP2"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "MUL"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "NOT"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "AND"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "SWAP1"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "DUP4"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "ISZERO"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "ISZERO"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "MUL"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "OR"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "SWAP1"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "SSTORE"
										},
										{
											"begin": 1070,
											"end": 1088,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "POP"
										},
										{
											"begin": 697,
											"end": 1095,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"bet()": "11610c25",
							"reveal(bytes32)": "701fd0f1",
							"setSealedSeed(bytes32)": "41114538"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sealedSeed\",\"type\":\"bytes32\"}],\"name\":\"setSealedSeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"Solidity Patterns/Randomness.sol\":\"Randomness\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Solidity Patterns/Randomness.sol\":{\"keccak256\":\"0x713b6282eacc3f423afb4565af858169ac99869235d63834b395d5b3f8e5cfae\",\"urls\":[\"bzzr://c54404c4eb26d58e3fdec0315792003efd863809fec35ee2193d0edf65a41956\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Randomness.sol:32:17: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        require(keccak256(msg.sender, _seed) == sealedSeed);\n                ^--------------------------^\n",
				"message": "This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.",
				"severity": "warning",
				"sourceLocation": {
					"end": 887,
					"file": "Solidity Patterns/Randomness.sol",
					"start": 859
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Randomness.sol:33:28: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint random = uint(keccak256(_seed, blockhash(storedBlockNumber)));\n                           ^--------------------------------------------^\n",
				"message": "This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.",
				"severity": "warning",
				"sourceLocation": {
					"end": 977,
					"file": "Solidity Patterns/Randomness.sol",
					"start": 931
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Randomness.sol:33:9: Warning: Unused local variable.\n        uint random = uint(keccak256(_seed, blockhash(storedBlockNumber)));\n        ^---------^\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 923,
					"file": "Solidity Patterns/Randomness.sol",
					"start": 912
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"formattedMessage": "Solidity Patterns/Randomness.sol:23:5: Warning: Function state mutability can be restricted to view\n    function bet() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Function state mutability can be restricted to view",
				"severity": "warning",
				"sourceLocation": {
					"end": 691,
					"file": "Solidity Patterns/Randomness.sol",
					"start": 606
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Solidity Patterns/Randomness.sol": {
				"ast": {
					"absolutePath": "Solidity Patterns/Randomness.sol",
					"exportedSymbols": {
						"Randomness": [
							111
						]
					},
					"id": 112,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".22"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 111,
							"linearizedBaseContracts": [
								111
							],
							"name": "Randomness",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3,
									"name": "sealedSeed",
									"nodeType": "VariableDeclaration",
									"scope": 111,
									"src": "159:18:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "159:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 6,
									"name": "seedSet",
									"nodeType": "VariableDeclaration",
									"scope": 111,
									"src": "183:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 4,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "183:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "66616c7365",
										"id": 5,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "198:5:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 9,
									"name": "betsClosed",
									"nodeType": "VariableDeclaration",
									"scope": 111,
									"src": "209:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 7,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "209:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "66616c7365",
										"id": 8,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "bool",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "227:5:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"value": "false"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 11,
									"name": "storedBlockNumber",
									"nodeType": "VariableDeclaration",
									"scope": 111,
									"src": "238:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 10,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "238:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 14,
									"name": "trustedParty",
									"nodeType": "VariableDeclaration",
									"scope": 111,
									"src": "266:65:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 12,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "266:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "307864436164336136643335363944463635353037304445643036636237413162324363643144334146",
										"id": 13,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "289:42:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 50,
										"nodeType": "Block",
										"src": "389:211:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "407:8:0",
															"subExpression": {
																"argumentTypes": null,
																"id": 20,
																"name": "seedSet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 6,
																"src": "408:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 19,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "399:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "399:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 23,
												"nodeType": "ExpressionStatement",
												"src": "399:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 28,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 25,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 126,
																	"src": "435:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 26,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "435:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 27,
																"name": "trustedParty",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 14,
																"src": "449:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "435:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 24,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "426:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "426:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 30,
												"nodeType": "ExpressionStatement",
												"src": "426:36:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 33,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 31,
														"name": "betsClosed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "472:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 32,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "485:4:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "472:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 34,
												"nodeType": "ExpressionStatement",
												"src": "472:17:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 35,
														"name": "sealedSeed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "499:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 36,
														"name": "_sealedSeed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "512:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "499:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "499:24:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 44,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 39,
														"name": "storedBlockNumber",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "533:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 40,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 116,
																"src": "553:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "553:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"argumentTypes": null,
															"hexValue": "31",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "568:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "553:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "533:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 45,
												"nodeType": "ExpressionStatement",
												"src": "533:36:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 46,
														"name": "seedSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "579:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "589:4:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "579:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "579:14:0"
											}
										]
									},
									"documentation": null,
									"id": 51,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "setSealedSeed",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"name": "_sealedSeed",
												"nodeType": "VariableDeclaration",
												"scope": 51,
												"src": "361:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 15,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "360:21:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "389:0:0"
									},
									"scope": 111,
									"src": "338:262:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "628:63:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "646:11:0",
															"subExpression": {
																"argumentTypes": null,
																"id": 55,
																"name": "betsClosed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 9,
																"src": "647:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 54,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "638:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "638:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "638:20:0"
											}
										]
									},
									"documentation": null,
									"id": 60,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "bet",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "618:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "628:0:0"
									},
									"scope": 111,
									"src": "606:85:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 109,
										"nodeType": "Block",
										"src": "735:360:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 66,
															"name": "seedSet",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 6,
															"src": "753:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 65,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "745:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 67,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "745:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 68,
												"nodeType": "ExpressionStatement",
												"src": "745:16:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 70,
															"name": "betsClosed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "779:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 69,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "771:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "771:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "771:19:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 77,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 74,
																"name": "storedBlockNumber",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 11,
																"src": "808:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 75,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 116,
																	"src": "828:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "number",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "828:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "808:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 73,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "800:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "800:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "800:41:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 82,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 126,
																			"src": "869:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 83,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "869:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 84,
																		"name": "_seed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 62,
																		"src": "881:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 81,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 120,
																	"src": "859:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
																		"typeString": "function () pure returns (bytes32)"
																	}
																},
																"id": 85,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "859:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 86,
																"name": "sealedSeed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "891:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "859:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 80,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															129,
															130
														],
														"referencedDeclaration": 129,
														"src": "851:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "851:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "851:51:0"
											},
											{
												"assignments": [
													91
												],
												"declarations": [
													{
														"constant": false,
														"id": 91,
														"name": "random",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "912:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 90,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "912:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 94,
																	"name": "_seed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 62,
																	"src": "941:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 96,
																			"name": "storedBlockNumber",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 11,
																			"src": "958:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 95,
																		"name": "blockhash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 117,
																		"src": "948:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$",
																			"typeString": "function (uint256) view returns (bytes32)"
																		}
																	},
																	"id": 97,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "948:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 93,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 120,
																"src": "931:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
																	"typeString": "function () pure returns (bytes32)"
																}
															},
															"id": 98,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "931:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 92,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "926:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": "uint"
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "926:52:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "912:66:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 101,
														"name": "seedSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "1045:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "66616c7365",
														"id": 102,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1055:5:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1045:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "1045:15:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 105,
														"name": "betsClosed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "1070:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "66616c7365",
														"id": 106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1083:5:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1070:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 108,
												"nodeType": "ExpressionStatement",
												"src": "1070:18:0"
											}
										]
									},
									"documentation": null,
									"id": 110,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "reveal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"name": "_seed",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "713:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 61,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "713:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "712:15:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "735:0:0"
									},
									"scope": 111,
									"src": "697:398:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 112,
							"src": "132:965:0"
						}
					],
					"src": "106:991:0"
				},
				"id": 0
			}
		}
	}
}